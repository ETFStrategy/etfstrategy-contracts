# Treasury Contract Testing

This directory contains comprehensive tests for the Treasury contract, designed to run on Ethereum Mainnet fork.

## Test Overview

The test suite focuses on the core functionality of buy and sell operations with the following test cases:

### Test Cases

1. **`testBuy()`** - Tests the buy function
   - Verifies order creation
   - Checks caller reward distribution
   - Validates token acquisition
   - Confirms order status transitions

2. **`testSell()`** - Tests the sell function
   - Tests selling existing orders
   - Verifies profit calculation
   - Checks buyback and burn mechanism
   - Validates caller rewards

3. **`testBuyAndSellSequence()`** - Tests complete workflow
   - End-to-end buy and sell cycle
   - Order lifecycle verification
   - Balance tracking throughout process

4. **`testMainnetIntegration()`** - Tests Mainnet compatibility
   - Validates real contract addresses
   - Confirms configuration correctness
   - Tests fork functionality

## Configuration

The tests use real Mainnet addresses:
- **Target Token**: USDC (`0xA0b86a33E6417C12B4341C3b9Fd2C39eE82E5d96`)
- **Buyback Token**: DAI (`0x6B175474E89094C44Da98b954EedeAC495271d0F`)
- **WETH**: `0xC02aaA39b223FE8D0A64eCF8C6b958C2846E7c02`

### Test Parameters
- Amount per order: 1,000 USDC
- Minimum PNL: 5%
- Pool fee: 0.3%
- Caller reward: 0.001 ETH

## Setup

1. **Configure RPC URL**:
   ```bash
   cp .env.example .env
   # Edit .env and add your Ethereum RPC URL
   ```

2. **Install Dependencies**:
   ```bash
   forge install
   ```

## Running Tests

### Quick Test
```bash
./test_treasury.sh
```

### Manual Test Commands

**Run all Treasury tests:**
```bash
forge test --fork-url $ETH_RPC_URL --match-contract TreasuryTest -vv
```

**Run specific test:**
```bash
# Test buy function
forge test --fork-url $ETH_RPC_URL --match-test testBuy -vvv

# Test sell function  
forge test --fork-url $ETH_RPC_URL --match-test testSell -vvv

# Test complete sequence
forge test --fork-url $ETH_RPC_URL --match-test testBuyAndSellSequence -vvv
```

**Run with maximum verbosity:**
```bash
forge test --fork-url $ETH_RPC_URL --match-contract TreasuryTest -vvvv
```

## Test Behavior

### Fork Testing
- Tests run on Ethereum Mainnet fork at latest block
- Uses real Uniswap V3 liquidity and pricing
- May skip tests if insufficient liquidity exists

### Expected Outcomes
- **Buy tests**: Should create orders and distribute caller rewards
- **Sell tests**: Should complete orders and execute buyback/burn
- **Integration tests**: Should validate Mainnet compatibility

### Gas Considerations
- Tests account for gas costs in balance calculations
- Caller rewards may be offset by transaction gas fees
- Large tolerance margins for gas cost variations

## Troubleshooting

### Common Issues

1. **RPC Rate Limits**:
   - Use paid RPC providers for reliable testing
   - Implement delays between test runs if needed

2. **Insufficient Liquidity**:
   - Tests will skip gracefully if Uniswap pools lack liquidity
   - Consider testing with different token pairs

3. **Fork Block Issues**:
   - Ensure RPC URL provides recent blocks
   - Some historical blocks may have different liquidity

### Debug Tips

1. **Increase Verbosity**:
   ```bash
   forge test --match-test testBuy -vvvv
   ```

2. **Check Specific Logs**:
   ```bash
   forge test --match-test testBuy -vv | grep "console"
   ```

3. **Test Individual Components**:
   ```bash
   forge test --match-test testGetConfig -vv
   ```

## Test Architecture

### Mock vs Real Testing
- Tests use real Mainnet contracts when possible
- Falls back to mocking when liquidity is insufficient
- Graceful degradation for edge cases

### Safety Features
- Tests don't modify real Mainnet state (fork only)
- Comprehensive balance and state verification
- Error handling for network issues

## Contributing

When adding new tests:
1. Focus on buy/sell functionality as requested
2. Include proper error handling for fork issues
3. Add descriptive console logging
4. Test both success and edge cases
5. Follow existing naming conventions